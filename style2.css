* {
    box-sizing: border-box;
    /*keeps the original width including margin and padding. Else margin padding change the width*/
}

:root{
    /* using :root we can create variables that can be accessed all over the css file */
    --red-color: red;
    --blue-color: blue;
    --margin: 2px;
    --max-w: 350px;
}

.container2 {
    width: 900px;
    border: 3px solid purple;
    margin: auto;
    background-color: rgb(239, 198, 168);
}

.item {
    border: 3px solid maroon;
    margin: 15px 3px;
    /* border-radius: 20px; */
    padding: 30px;
    background-color: rgb(244, 219, 219);

}

#fruits {
    float: right;
    width: 48%;
}

#computers {
    float: left;
    width: 48%;
}

#beds {
    /* float: left; */
    width: 99.35%;
    /* clear: left; to clar items which float left*/
    clear: both;
}

p,
h3 {
    /* text-align: left;
    text-align: right;
    text-align: center; */
    text-align: justify;
}

h1 {
    margin: 23px auto;
    width: 480px;
}

.container3 {
    background-color: rgb(162, 241, 162);
    border: 3px solid rgb(233, 101, 101);
    padding: 34px;
    margin: 34px auto;
    width: 600px;
}

.btn {
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    font-weight: bold;
    background-color: rgb(237, 207, 12);
    padding: 6px;
    border: none;
    cursor: pointer;
    font-size: 13px;
    border-radius: 10px;
}

a {
    text-decoration: none;
}

/* PSEUDO SELECTORS */
a:hover {
    color: brown;
    background-color: rgb(181, 161, 5);
}

a:visited {
    background-color: rgb(44, 157, 182);
}

a:active {
    background-color: blueviolet;
}

.btn:hover {
    color: aqua;
    background-color: brown;
    border: 2px solid rgb(16, 36, 148);
}






.navbar {
    background-color: rgb(18, 1, 65);
    border-radius: 20px;
}

.navbar ul {
    overflow: auto;
    /*Else bg color will not apppear */
}

.navbar li {
    float: left;
    list-style: none;
    margin: 15px 10px;
}

.navbar li a {
    padding: 3px 3px;
    text-decoration: none;
    color: white;
}

.navbar li a:hover {
    background-color: rgb(0, 0, 0);
}

.search {
    color: white;
    float: right;
    padding: 15px 70px;
}

.navbar input {
    border: 2px solid black;
    border-radius: 7px;
    padding: 3px 17px;
    width: 163px;

}

img {
    width: 75px;
    height: 90px;
    margin: auto;
    display: block;
}

h3 {
    text-align: center;
    font-family: Arial, Helvetica, sans-serif;
    font-weight: bold;
    margin: 4px;
}

.top {
    /* margin: auto;
    width: 1200px;*/
}

/* display inline means element takes space is taken according to the size of the element
   display block means we can set the height and width of the element */

.container4 {
    margin: auto;
    width: 1200px;
}

.box {
    background-color: grey;
    color: black;
    margin: 4px 0px;
    border: 2px solid black;
    padding: 20px;
    display: inline-block;
    width: 33%;
    box-sizing: border-box;
    /*keeps the original width including margin and padding. Else margin padding change the width*/
}

.container5 {
    border: 3px solid black;
    background-color: khaki;
    height: 3444px;
}

.boxyy {
    border: 2px solid red;
    display: inline-block;
    height: 150px;
    width: 150px;
    margin: 4px;
}

/* CSS Position : static(default), relative, absolute, fixed, sticky */

#box3 {
    /* relative means : Positions the element relative to its normal position and will leave a gap its normal position*/

    /* absolute means : Positions the element relative to its first parent. Here parent is the div class conatiner 5 */

    /* fixed means that the position fixed relative to its browser window. EPositions the element lement stays fixed in its position regardless of scrolling (USEFUL FOR CHAT WEBSITES) */

    /* sticky means : Sticks the element to a particular position irrespective of scrolling (USEFUL FOR MAKING MENU-BARS TO SUDDENLY SCROLL UP) */

    /* position: relative;
    top: 34px;
    left: 34px; */

    /* position: fixed;
    right: 13px;
    bottom: 3px; */

    position: sticky;
    top: 4px;
}

.asdf {
    border: 2px solid black;
    height: 170px;
    width: 170px;
}

#asdf1 {
    position: relative;
    top: 70px;
    z-index: 35;
    /*if z-index value is more it implies that in a stack it will be placed higher */
    background-color: rgb(255, 234, 0);
}

#asdf2 {
    position: relative;
    top: 14px;

    z-index: 34;
    /* z-index will only work for positions Absolute, Relative, Fixed and Sticky (not for deafult - static) */

    /* visibility: hidden; */

    /* Hidden visibility keeps the element in its place but makes it invisible*/

    /* display: none; */

    /* Display none means deleting the element (deletes the element and also its occupied space)*/

    background-color: rgb(254, 3, 3);
}

#asdf3 {
    background-color: rgb(0, 220, 26);
}

#asdf4 {
    background-color: rgb(5, 9, 255);
}

.container7 {
    border: 2px solid red;
    height: 544px;

    /* Initialize the container as a flex box  */
    display: flex;

    /* flex properties for flex container */

    flex-direction: row;
    /* (default value is row) */

    /* flex-direction: column;
    flex-direction: row-reverse; 
    flex-direction: column-reverse; */

    flex-wrap: wrap;
    /* Wrap property solves the problem of wrapping , helpful for making responsive display (default no-wrap)*/
    /* flex-wrap: wrap-reverse; */




    /* Helps to set properties */
    /* flex-flow: row-reverse wrap; /* Short hand operator */





    /* JUSTIFY CONTENT PROVIDES SPACE HORIZONTALLY */

    /*justify-content: center;   /* all contents are made in the middle */
    /*justify-content: space-between;  /* |element__element__element|   Provides equal spaces BETWEEN each element in a container (no spaces between either sides and margin) */
    justify-content: space-evenly;
    /* |__element__element__element__|   Provides equal spaces on BOTH SIDES OF THE ELEMENTS which is equal to the Spaces on either side of the corner elements with the margin */
    /*justify-content: space-around; /* |_element__element__element_|   Provides equal spaces on BOTH SIDES OF THE ELEMENTS */

    /* ALIGN ITEMS WILL PROVIDE SPACE VERTICALLY */
    /* align-items: center;           /* vertically centre elements*/
    /* align-items: flex-end;
       align-items: flex-start; /* (default) */
    align-items: stretch;
    /* Makes vertically equal spaces between elements */
}

.itemam {
    background-color: tomato;
    border: 3px solid black;
    margin: 10px;
    padding: 10px;
    width: 200px;
    height: 200px;
}

#item-1 {
    /*higher the order, later it is shown in the container */
    /* order: 11; */

    /* higher the flex grow value the faster it will expand on expanding the screen */
    /* flex-grow: 2; */

    /* higher the flex shrink value the faster it will shrink on shrink the screen  */
    /* flex-shrink: 2; */
}

#item-2 {
    /* order: 7; */
    /* flex-grow: 10;

    flex-shrink: 3; */

    /*When flex-basis is set to row, it will control width*/
    /*When flex-basis is set to column, it will control height*/
    flex-basis: 300px;
}

#item-3 {
    /* order: 8; */

    flex: 0 0 160px;
    /* shorthand notation = flex grow..... flex shrink.... flex basis*/

    /* align-self: center; */
    align-self: flex-end;
    /*align-self: flex-start; */
}

html {
    font-size: 25px;
}

.container8 {
    font-size: 10px;
    text-align: center;
    border: 2px solid red;
    /* width: 400px; /*inconvenient method for responsive layouts of websites */
    width: 98vw;
    /* height: 804px; /* inconvenient method as above */
    height: 100vh;
    /* (vh stands for viewport height )*/
}

#heading1 {
    /* font-size: 3em;  /* makes the text three times its parent class = 3*10px = 30px */
    /* padding: 3em; /* makes the padding three times its font size = 3 * (3*10px) = 90px */
}

#heading2 {
    /* font-size: 3rem;  /* makes the text three times its parent class (here it is HTML = 3*25px = 75px */
    /* padding: 3rem; /* makes the padding three times its parent class = 3 * 25px = 75px */
}

.boxer {
    background-color: rgb(145, 255, 255);
    text-align: center;
    display: none;
}

@media only screen and (max-width:300px) {
    #box_1 {
        display: block;
        background-color: rgb(155, 95, 210);
    }
}

@media only screen and (max-width:500px) and (min-width: 300px) {
    #box_2 {
        display: block;
        background-color: rgb(183, 66, 66);
    }
}

@media only screen and (max-width:800px) and (min-width: 500px) {
    #box_3 {
        display: block;
        background-color: rgb(57, 205, 67);
    }
}

@media only screen and (min-width: 800px) {
    #box_4 {
        display: block;
        background-color: rgb(183, 66, 66);
    }
}

div>p {
    /* this > means that only p tags which are the direct children of div will get affected */
    background-color: yellow;
    color: black;
}

div+p {
    /* it means if certain div is followed by p tag, then only it is affected (p is next sibling than div)*/
    background-color: aqua;
    color: black;
}

input {
    /*if block then we can set width and make margin auto to make it at the centre*/
    display: block;
}

.container11 {
    display: block;
    width: 500px;
    /* margin: 34px 23px; */
    margin: auto;
}

/* MORE PSEUDO SELECTORS */

input[type='text'] {
    border: 3px solid red;
    padding: 30px;
}

input[type='email'] {
    border: 4px solid purple;
    padding: 30px;
}

a[target] {
    /* only affects the anchor tag where the target is set */
    font-size: 50px;
    color: pink;
}

a[target='_self'] {
    /* only affects the anchor tag where the target is set to _self */
    font-size: 40px;
    color: rgb(159, 0, 26);
}

/*
li:nth-child(3){  /* apply css to the third child of list 
    color: rgb(0, 160, 209);
}
li:nth-child(2n+0){  /* apply css to the 2n+0 th element of list (n=0,1,2...) 
    color: rgb(141, 0, 138);
}


li:nth-child(5){
    color: rgb(0, 173, 66);
    font-weight: bold;
}
li:nth-child(odd){
    color: rgb(249, 245, 0);
    
    /* font-weight: bold; 
}
li:nth-child(even){
    background-color: rgb(0, 173, 118);
    font-weight: bold;
} */

body {
    background-color: rgb(224, 224, 236);
    margin: 0px;
    padding: 0px;
}

section {
    display: flex;
    flex-direction: column;
    margin: 3px 264px;
    align-items: center;
    border: 3px solid red;
    height: 544px;
    justify-content: center;
}
/* 
section::before {
    content: "This is before content";
}

section::after {
    content: "This is after content";
} */

section h2 {
    font-size: 2rem;
}
header{
    font-family: 'Tektur', cursive;;
}
.navigation {
    font-size: 19px;
    display: flex;
    font-weight: bold;
}

.navigation li {
    list-style: none;
    padding: 26px 38px;
}

section p {
    text-align: center;
}

/* IMPORTANT TECHNIQUE */
header::before{
    content: "";
    background: url('https://images.unsplash.com/photo-1682687982502-1529b3b33f85?ixlib=rb-4.0.3&ixid=M3wxMjA3fDF8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=870&q=80') no-repeat center center/cover;
    position: absolute;
    /* top: 0;
    left: 0; /* top 0 and left 0 must be done when position is absolute*/
    width: 100%;
    height: 100%;
    z-index: -1;
    opacity: 0.3;
}

.container12{
    display: flex;
}
.card{
    /* border: 2px solid red; */
    padding: 3px 23px;
    margin: 23px 12px;
    background-color: yellow;
    /* box-shadow: 10px 13px rgb(30, 115, 143);  (offset-x offset-y)*/
    box-shadow: -10px -13px 15px rgb(30, 115, 143);
    box-shadow: -10px -13px 15px 4px rgba(30, 115, 143, 0.6);  /*syntax  = (offset-x .. offset-y .. blur-radius .. spread-readius .. color)  */
    /* rgba color sequence is for red, green, blue, alpha ... where alpha decides the darkness of color*/

    box-shadow: inset 3px 5px rgb(0, 107, 128); /* inset means shadow within the box not outside the box */
}

.card h2{
    text-shadow: 10px 10px 5px rgb(234, 108, 108);
}

.container13{
    --color: rgb(246, 166, 243); /* Variable declaration */
    max-width: var(--max-w);
    margin: auto;

    /* we did margin auto here because we shortened the width of the container with the variable, so the contents of the container would have moved to the left if margin auto was not applied */

    display: flex;
    background-color: var(--color);
    align-items: center;
    justify-content: center;
}

.boxxx{
    --color: blue; /* Variable declaration */

    /*The scope of the variable is only within this .boxxx class */

    background-color: var(--color); /* way to put variable in action */
    width: 144px;
    height: 144px;
    margin: 10px 10px;
    border: var(--margin) solid red;
    box-shadow: 7px 6px 24px 3px var(--color);
}
