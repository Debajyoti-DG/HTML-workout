* {
    box-sizing: border-box;
    /*keeps the original width including margin and padding. Else margin padding change the width*/
}

.container2 {
    width: 900px;
    border: 3px solid purple;
    margin: auto;
    background-color: rgb(239, 198, 168);
}

.item {
    border: 3px solid maroon;
    margin: 15px 3px;
    /* border-radius: 20px; */
    padding: 30px;
    background-color: rgb(244, 219, 219);

}

#fruits {
    float: right;
    width: 48%;
}

#computers {
    float: left;
    width: 48%;
}

#beds {
    /* float: left; */
    width: 99.35%;
    /* clear: left; to clar items which float left*/
    clear: both;
}

p,
h3 {
    /* text-align: left;
    text-align: right;
    text-align: center; */
    text-align: justify;
}

h1 {
    margin: 23px auto;
    width: 480px;
}

.container3 {
    background-color: rgb(162, 241, 162);
    border: 3px solid rgb(233, 101, 101);
    padding: 34px;
    margin: 34px auto;
    width: 600px;
}

.btn {
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    font-weight: bold;
    background-color: rgb(237, 207, 12);
    padding: 6px;
    border: none;
    cursor: pointer;
    font-size: 13px;
    border-radius: 10px;
}

a {
    text-decoration: none;
}

/* PSEUDO SELECTORS */
a:hover {
    color: brown;
    background-color: rgb(181, 161, 5);
}

a:visited {
    background-color: rgb(44, 157, 182);
}

a:active {
    background-color: blueviolet;
}

.btn:hover {
    color: aqua;
    background-color: brown;
    border: 2px solid rgb(16, 36, 148);
}






.navbar {
    background-color: rgb(18, 1, 65);
    border-radius: 20px;
}

.navbar ul {
    overflow: auto;
    /*Else bg color will not apppear */
}

.navbar li {
    float: left;
    list-style: none;
    margin: 15px 10px;
}

.navbar li a {
    padding: 3px 3px;
    text-decoration: none;
    color: white;
}

.navbar li a:hover {
    background-color: rgb(0, 0, 0);
}

.search {
    color: white;
    float: right;
    padding: 15px 70px;
}

.navbar input {
    border: 2px solid black;
    border-radius: 7px;
    padding: 3px 17px;
    width: 163px;

}

img {
    width: 75px;
    height: 90px;
    margin: auto;
    display: block;
}

h3 {
    text-align: center;
    font-family: Arial, Helvetica, sans-serif;
    font-weight: bold;
    margin: 4px;
}

.top {
    /* margin: auto;
    width: 1200px;*/
}

/* display inline means element takes space is taken according to the size of the element
   display block means we can set the height and width of the element */

.container4 {
    margin: auto;
    width: 1200px;
}

.box {
    background-color: grey;
    color: black;
    margin: 4px 0px;
    border: 2px solid black;
    padding: 20px;
    display: inline-block;
    width: 33%;
    box-sizing: border-box;
    /*keeps the original width including margin and padding. Else margin padding change the width*/
}

.container5 {
    border: 3px solid black;
    background-color: khaki;
    height: 3444px;
}

.boxyy {
    border: 2px solid red;
    display: inline-block;
    height: 150px;
    width: 150px;
    margin: 4px;
}

/* CSS Position : static(default), relative, absolute, fixed, sticky */

#box3 {
    /* relative means : Positions the element relative to its normal position and will leave a gap its normal position*/

    /* absolute means : Positions the element relative to its first parent. Here parent is the div class conatiner 5 */

    /* fixed means that the position fixed relative to its browser window. EPositions the element lement stays fixed in its position regardless of scrolling (USEFUL FOR CHAT WEBSITES) */

    /* sticky means : Sticks the element to a particular position irrespective of scrolling (USEFUL FOR MAKING MENU-BARS TO SUDDENLY SCROLL UP) */

    /* position: relative;
    top: 34px;
    left: 34px; */

    /* position: fixed;
    right: 13px;
    bottom: 3px; */

    position: sticky;
    top: 4px;
}

.asdf {
    border: 2px solid black;
    height: 170px;
    width: 170px;
}

#asdf1 {
    position: relative;
    top: 70px;
    z-index: 35;
    /*if z-index value is more it implies that in a stack it will be placed higher */
    background-color: rgb(255, 234, 0);
}

#asdf2 {
    position: relative;
    top: 14px;

    z-index: 34;
    /* z-index will only work for positions Absolute, Relative, Fixed and Sticky (not for deafult - static) */

    /* visibility: hidden; */

    /* Hidden visibility keeps the element in its place but makes it invisible*/

    /* display: none; */

    /* Display none means deleting the element (deletes the element and also its occupied space)*/

    background-color: rgb(254, 3, 3);
}

#asdf3 {
    background-color: rgb(0, 220, 26);
}

#asdf4 {
    background-color: rgb(5, 9, 255);
}

.container7 {
    border: 2px solid red;
    height: 544px;

    /* Initialize the container as a flex box  */
    display: flex;

    /* flex properties for flex container */

    flex-direction: row;
    /* (default value is row) */

    /* flex-direction: column;
    flex-direction: row-reverse; 
    flex-direction: column-reverse; */

    flex-wrap: wrap;
    /* Wrap property solves the problem of wrapping , helpful for making responsive display (default no-wrap)*/
    /* flex-wrap: wrap-reverse; */




    /* Helps to set properties */
    /* flex-flow: row-reverse wrap; /* Short hand operator */





    /* JUSTIFY CONTENT PROVIDES SPACE HORIZONTALLY */

    /*justify-content: center;   /* all contents are made in the middle */
    /*justify-content: space-between;  /* |element__element__element|   Provides equal spaces BETWEEN each element in a container (no spaces between either sides and margin) */
    justify-content: space-evenly;
    /* |__element__element__element__|   Provides equal spaces on BOTH SIDES OF THE ELEMENTS which is equal to the Spaces on either side of the corner elements with the margin */
    /*justify-content: space-around; /* |_element__element__element_|   Provides equal spaces on BOTH SIDES OF THE ELEMENTS */

    /* ALIGN ITEMS WILL PROVIDE SPACE VERTICALLY */
    /* align-items: center;           /* vertically centre elements*/
    /* align-items: flex-end;
       align-items: flex-start; /* (default) */
    align-items: stretch;
    /* Makes vertically equal spaces between elements */
}

.itemam {
    background-color: tomato;
    border: 3px solid black;
    margin: 10px;
    padding: 10px;
    width: 200px;
    height: 200px;
}

#item-1 {
    /*higher the order, later it is shown in the container */
    /* order: 11; */

    /* higher the flex grow value the faster it will expand on expanding the screen */
    /* flex-grow: 2; */

    /* higher the flex shrink value the faster it will shrink on shrink the screen  */
    /* flex-shrink: 2; */
}

#item-2 {
    /* order: 7; */
    /* flex-grow: 10;

    flex-shrink: 3; */

    /*When flex-basis is set to row, it will control width*/
    /*When flex-basis is set to column, it will control height*/
    flex-basis: 1000px;
}

#item-3 {
    /* order: 8; */

    flex: 1 1 160px;
    /* shorthand notation = flex grow..... flex shrink.... flex basis*/

    /* align-self: center; */
    align-self: flex-end;
    /*align-self: flex-start; */
}